class Solution:
    def countEleLessThanOrEqual(self, arr, x):
        n = len(arr)
        
        # Helper function to find the pivot (index of smallest element)
        def find_pivot():
            low, high = 0, n - 1
            while low < high:
                mid = (low + high) // 2
                if arr[mid] > arr[high]:
                    low = mid + 1
                else:
                    high = mid
            return low

        # Standard binary search to find count of elements <= x in a sorted array segment
        def count_less_equal(low, high):
            res = -1
            while low <= high:
                mid = (low + high) // 2
                if arr[mid] <= x:
                    res = mid
                    low = mid + 1
                else:
                    high = mid - 1
            if res == -1:
                return 0
            return res - low_start + 1
        
        pivot = find_pivot()

        # Search in arr[pivot..end]
        low_start = pivot
        low_end = n - 1
        res1 = 0
        if pivot <= low_end:
            # Binary search for right-most element <= x in this range
            low, high = low_start, low_end
            idx = -1
            while low <= high:
                mid = (low + high) // 2
                if arr[mid] <= x:
                    idx = mid
                    low = mid + 1
                else:
                    high = mid - 1
            if idx != -1:
                res1 = idx - low_start + 1

        # Search in arr[0..pivot-1]
        res2 = 0
        if pivot - 1 >= 0:
            low_start = 0
            low_end = pivot - 1
            low, high = low_start, low_end
            idx = -1
            while low <= high:
                mid = (low + high) // 2
                if arr[mid] <= x:
                    idx = mid
                    low = mid + 1
                else:
                    high = mid - 1
            if idx != -1:
                res2 = idx - low_start + 1

        return res1 + res2
