class Solution:
    def palQueries(self, s, queries):
        n = len(s)
        mod = 10**9 + 7
        base = 31

        # Precompute powers of base
        power = [1] * (n + 1)
        for i in range(1, n + 1):
            power[i] = (power[i - 1] * base) % mod

        # Precompute prefix hashes (normal string)
        prefix_hash = [0] * (n + 1)
        for i in range(n):
            prefix_hash[i + 1] = (prefix_hash[i] * base + ord(s[i]) - ord('a') + 1) % mod

        # Precompute prefix hashes (reversed string)
        s_rev = s[::-1]
        rev_prefix_hash = [0] * (n + 1)
        for i in range(n):
            rev_prefix_hash[i + 1] = (rev_prefix_hash[i] * base + ord(s_rev[i]) - ord('a') + 1) % mod

        def get_hash(l, r, h):
            """ Get hash of s[l:r] from precomputed prefix hashes """
            return (h[r + 1] - h[l] * power[r - l + 1]) % mod

        res = []
        for left, right in queries:
            len_sub = right - left + 1
            rev_l = n - 1 - right
            rev_r = n - 1 - left
            if get_hash(left, right, prefix_hash) == get_hash(rev_l, rev_r, rev_prefix_hash):
                res.append(1)
            else:
                res.append(0)
        return res
